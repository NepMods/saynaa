export function print_int(val) {
  asm(0, `; allocate 32 bytes on stack for buffer (enough for 20 digits + newline)
                sub rsp, 32
                lea rsi, [rsp + 31]    ; point to end of buffer
                mov byte [rsi], 10     ; newline
                dec rsi

                mov rax, rdi           ; value to convert
                mov rcx, 10

            .convert_loop:
                xor rdx, rdx
                div rcx                ; divide rax by 10 -> quotient in rax, remainder in rdx
                add dl, '0'
                mov [rsi], dl
                dec rsi
                test rax, rax
                jnz .convert_loop

                inc rsi                ; point to first digit

                ; write syscall
                mov rax, 1             ; syscall: write
                mov rdi, 1             ; stdout
                mov rdx, rsp
                lea rdx, [rsp + 32]    ; end of stack buffer
                sub rdx, rsi           ; length = end - start
                mov rsi, rsi           ; buffer pointer is already in rsi
                syscall

                ; restore stack
                add rsp, 32`);
}
